{"version":3,"sources":["logo.svg","TextInput.js","TextOutput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","name","rows","placeholder","value","this","props","onChange","handleInput","id","Component","marked","require","TextOutput","a","__html","dangerouslySetInnerHTML","markItUp","input","className","App","state","markdown","updateMarkdown","bind","event","setState","target","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,kC,sHCmB5BC,G,kLAdX,OACE,8BACEC,KAAK,QACLC,KAAK,KACLC,YAAY,sBACZC,MAAOC,KAAKC,MAAMF,MAClBG,SAAUF,KAAKC,MAAME,YAErBC,GAAG,e,GAVaC,cCAlBC,EAASC,EAAQ,IAiBRC,E,uKAdJC,GACP,MAAO,CAACC,OAAQD,K,+BAGhB,OACE,yBACEE,wBAA2BX,KAAKY,SAASN,EAAON,KAAKC,MAAMY,QAC3DC,UAAU,YACVV,GAAG,gB,GATcC,aCKnBU,E,kDACJ,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,CACTC,SAAUnB,GAIZ,EAAKoB,eAAiB,EAAKA,eAAeC,KAApB,gBAPP,E,2DAUNC,GACbpB,KAAKqB,SAAS,CACZJ,SAAUG,EAAME,OAAOvB,U,+BAMzB,OACE,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKS,MAAM,qCACR,wBAAIT,UAAU,aAAd,wBAIL,0BAAMS,MAAM,cACV,yBAAKA,MAAM,mBACP,yBAAKA,MAAM,QAGb,yBAAKA,MAAM,OACP,yBAAKA,MAAM,uCACV,wBAAIA,MAAM,+BAAV,UACE,yBAAKA,MAAM,6CAEN,kBAAC,EAAD,CAAWxB,MAAOC,KAAKgB,MAAMC,SAAUd,YAAaH,KAAKkB,mBAIjE,yBAAKK,MAAM,mBACT,wBAAIA,MAAM,+BAAV,WACC,kBAAC,EAAD,CAAYV,MAAOb,KAAKgB,MAAMC,oB,GA3C7BZ,aAqDdP,EAAY,8tCA+CDiB,IClGKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b8bf45cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass TextInput extends Component {\r\n  render() {\r\n    return (\r\n      <textarea\r\n        name=\"input\"\r\n        rows=\"50\"\r\n        placeholder=\"type here stupid...\"\r\n        value={this.props.value}\r\n        onChange={this.props.handleInput}\r\n\r\n        id=\"editor\">\r\n      </textarea>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextInput;\r\n","\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nconst marked = require('marked');\r\n\r\nclass TextOutput extends Component {\r\n  markItUp(a) {\r\n    return {__html: a};\r\n  }\r\n  render() {\r\n    return (\r\n      <div\r\n        dangerouslySetInnerHTML = {this.markItUp(marked(this.props.input))}\r\n        className=\"box right\"\r\n        id=\"preview\"\r\n/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextOutput;\r\n","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport FormLabel from 'react-bootstrap/FormLabel'\n\nimport TextInput from './TextInput'\nimport TextOutput from './TextOutput'\n\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n        markdown: placeholder\n    }\n\n\n      this.updateMarkdown = this.updateMarkdown.bind(this);\n  }\n\nupdateMarkdown(event){\n  this.setState({\n    markdown: event.target.value\n  })\n}\n\nrender(){\n\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\" >\n        <div class=\" text-center text-black bg-succes\">\n           <h1 className=\"App-title\">Markdown Previewer</h1>\n        </div>\n      </header>\n\n      <body class=\"bg-success\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n            </div>\n          <div class=\"row\">\n              <div class=\"col-6 bg-primary d-flex flex-column\">\n               <h2 class=\"text-white text-center my-3\">Editor</h2>\n                 <div class=\"form-group flex-grow-1 d-flex flex-column\">\n\n                      <TextInput value={this.state.markdown} handleInput={this.updateMarkdown} />\n\n                 </div>\n              </div>\n              <div class=\"col-6 bg-danger\">\n                <h2 class=\"text-white text-center my-3\">Preview</h2>\n                 <TextOutput input={this.state.markdown}/>\n              </div>\n          </div>\n        </div>\n      </body>\n    </div>\n    )\n  }\n}\n\nlet placeholder= `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\nif (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\nreturn multiLineCode;\n}\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n- Some are bulleted.\n- With different indentation levels.\n- That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![Useful Programmer](https://usefulprogrammer.org/wp-content/uploads/2020/05/00_Leonardo_da_Vinci_-_Ginevra_de_Benci.jpg)\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}